{
  "app": {
    "name": "Email app",
    "email": {
      "sender": "noreply.base@gmail.com"
    }
  },
  "messages": {
  },
  "errors": {
    "title": {
      "system": "System error",
      "required": "System error",
      "numDigits": "There are required items",
      "field": {
        "required": "There are required items"
      },
      "unauthorized": "User not authorized",
      "unauthenticated": "User not authenticated",
      "tokenExpired": "User authentication expired",
      "errorOccurred": "An error has occurred"
    },
    "csv": {
      "sentence": {
        "invalidContent": "There is an error in the contents of the example sentence file",
        "invalidFormat": "The format of the example sentence file is incorrect",
        "existed": "Sentence list of content must be empty"
      }
    },
    "user": {
      "expiredToken": "The token was expired, please try reset password request again."
    },
    "job": {
      "notFound": "Job not found",
      "notCompleted": "Job must be processed completely before export, please check the job status",
      "notFoundFile": "Not found file"
    },
    "joi": {
      "messages": {
        "any": {
          "custom": "{{label}} failed custom validation because {{error.message}}",
          "default": "{{label}} threw an error when running default method",
          "failover": "{{label}} threw an error when running failover method",
          "invalid": "{{label}} contains an invalid value",
          "only": "{{label}} must be in [{{valids}}]",
          "ref": "{{label}} {{arg}} references '{{ref}}' which {{reason}}",
          "required": "{{label}} is required",
          "unknown": "{{label}} is not allowed"
        },
        "alternatives": {
          "all": "{{label}} does not match all of the required types",
          "any": "{{label}} does not match any of the allowed types",
          "match": "{{label}} does not match any of the allowed types",
          "one": "{{label}} matches more than one allowed type",
          "types": "{{label}} must be one of {{types}}"
        },
        "array": {
          "base": "{{label}} must be an array",
          "excludes": "{{label}} contains an excluded value",
          "hasKnown": "{{label}} does not contain at least one required match for type '{patternLabel}'",
          "hasUnknown": "{{label}} does not contain at least one required match",
          "includes": "{{label}} does not match any of the allowed types",
          "includesRequiredBoth": "{{label}} does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)",
          "includesRequiredKnowns": "{{label}} does not contain {{knownMisses}}",
          "includesRequiredUnknowns": "{{label}} does not contain {{unknownMisses}} required value(s)",
          "length": "{{label}} must contain {{limit}} items",
          "max": "{{label}} must contain less than or equal to {{limit}} items",
          "min": "{{label}} must contain at least {{limit}} items",
          "orderedLength": "{{label}} must contain at most {{limit}} items",
          "sort": "{{label}} must be sorted in {order} order by {{by}}",
          "sort.mismatching": "{{label}} cannot be sorted due to mismatching types",
          "sort.unsupported": "{{label}} cannot be sorted due to unsupported type {type}",
          "sparse": "{{label}} must not be a sparse array item",
          "unique": "{{label}} contains a duplicate value"
        },
        "binary": {
          "base": "{{label}} must be a buffer or a string",
          "length": "{{label}} must be {{limit}} bytes",
          "max": "{{label}} must be less than or equal to {{limit}} bytes",
          "min": "{{label}} must be at least {{limit}} bytes"
        },
        "boolean": {
          "base": "{{label}} must be a boolean"
        },
        "date": {
          "base": "{{label}} must be a valid date",
          "format": "{{label}} must be in {msg('date.format.' + #format) || #format} format",
          "greater": "{{label}} must be greater than '{{limit}}'",
          "less": "{{label}} must be less than '{{limit}}'",
          "max": "{{label}} must be less than or equal to '{{limit}}'",
          "min": "{{label}} must be larger than or equal to '{{limit}}'",
          "format.iso": "ISO 8601 date",
          "format.javascript": "timestamp or number of milliseconds",
          "format.unix": "timestamp or number of seconds"
        },
        "function": {
          "arity": "{{label}} must have an arity of {{n}}",
          "class": "{{label}} must be a class",
          "maxArity": "{{label}} must have an arity lesser or equal to {{n}}",
          "minArity": "{{label}} must have an arity greater or equal to {{n}}"
        },
        "object": {
          "and": "{{label}} contains {{presentWithLabels}} without its required peers {{missingWithLabels}}",
          "assert": "{{label}} is invalid because {if(#subject.key, `'` + #subject.key + `' failed to ` + (#message || 'pass the assertion test'), #message || 'the assertion failed')}",
          "base": "{{label}} must be an object",
          "instance": "{{label}} must be an instance of '{{type}}'",
          "length": "{{label}} must have {{limit}} key{if(#limit == 1, '', 's')}",
          "max": "{{label}} must have less than or equal to {{limit}} key{if(#limit == 1, '', 's')}",
          "min": "{{label}} must have at least {{limit}} key{if(#limit == 1, '', 's')}",
          "missing": "{{label}} must contain at least one of {{peersWithLabels}}",
          "nand": "'{{mainWithLabel}}' must not exist simultaneously with {{peersWithLabels}}",
          "oxor": "{{label}} contains a conflict between optional exclusive peers {{peersWithLabels}}",
          "pattern": {
            "match": "{{label}} keys failed to match pattern requirements"
          },
          "refType": "{{label}} must be a Joi reference",
          "rename": {
            "multiple": "{{label}} cannot rename '{{from}}' because multiple renames are disabled and another key was already renamed to '{{to}}'",
            "override": "{{label}} cannot rename '{{from}}' because override is disabled and target '{{to}}' exists"
          },
          "schema": "{{label}} must be a Joi schema of {{type}} type",
          "unknown": "{{label}} is not allowed",
          "with": "'{{mainWithLabel}}' missing required peer '{{peerWithLabel}}'",
          "without": "'{{mainWithLabel}}' conflict with forbidden peer '{{peerWithLabel}}'",
          "xor": "{{label}} contains a conflict between exclusive peers {{peersWithLabels}}"
        },
        "number": {
          "base": "{{label}} must be a number",
          "greater": "{{label}} must be greater than {{limit}}",
          "infinity": "{{label}} cannot be infinity",
          "integer": "{{label}} must be an integer",
          "less": "{{label}} must be less than {{limit}}",
          "max": "{{label}} must be less than or equal to {{limit}}",
          "min": "{{label}} must be larger than or equal to {{limit}}",
          "multiple": "{{label}} must be a multiple of {{multiple}}",
          "negative": "{{label}} must be a negative number",
          "port": "{{label}} must be a valid port",
          "positive": "{{label}} must be a positive number",
          "precision": "{{label}} must have no more than {{limit}} decimal places",
          "unsafe": "{{label}} must be a safe number"
        },
        "symbol": {
          "base": "{{label}} must be a symbol",
          "map": "{{label}} must be one of {{map}}"
        },
        "string": {
          "alphanum": "{{label}} must only contain alpha-numeric characters",
          "base": "{{label}} must be a string",
          "base64": "{{label}} must be a valid base64 string",
          "creditCard": "{{label}} must be a credit card",
          "dataUri": "{{label}} must be a valid dataUri string",
          "domain": "{{label}} must contain a valid domain name",
          "email": "{{label}} must be a valid email",
          "empty": "{{label}} is not allowed to be empty",
          "guid": "{{label}} must be a valid GUID",
          "hex": "{{label}} must only contain hexadecimal characters",
          "hexAlign": "{{label}} hex decoded representation must be byte aligned",
          "hostname": "{{label}} must be a valid hostname",
          "ip": "{{label}} must be a valid ip address with a {{cidr}} CIDR",
          "ipVersion": "{{label}} must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR",
          "isoDate": "{{label}} must be in iso format",
          "isoDuration": "{{label}} must be a valid ISO 8601 duration",
          "length": "{{label}} length must be {{limit}} characters long",
          "lowercase": "{{label}} must only contain lowercase characters",
          "max": "{{label}} length must be less than or equal to {{limit}} characters long",
          "min": "{{label}} length must be at least {{limit}} characters long",
          "normalize": "{{label}} must be unicode normalized in the {{form}} form",
          "token": "{{label}} must only contain alpha-numeric and underscore characters",
          "pattern": {
            "base": "{{label}} with value {:[.]} fails to match the required pattern: {{regex}}",
            "name": "{{label}} with value '{[.]}' fails to match the {{name}} pattern",
            "invert": {
              "base": "{{label}} with value {:[.]} matches the inverted pattern: {{regex}}",
              "name": "{{label}} with value '{[.]}' matches the inverted {{name}} pattern"
            }
          },
          "trim": "{{label}} must not have leading or trailing whitespace",
          "uri": "{{label}} must be a valid uri",
          "uriCustomScheme": "{{label}} must be a valid uri with a scheme matching the {{scheme}} pattern",
          "uriRelativeOnly": "{{label}} must be a valid relative uri",
          "uppercase": "{{label}} must only contain uppercase characters"
        }
      },
      "idMaps": {
        "any": {
          "custom": "INTERNAL_SERVER_ERROR",
          "default": "INTERNAL_SERVER_ERROR",
          "failover": "INTERNAL_SERVER_ERROR",
          "invalid": "INTERNAL_SERVER_ERROR",
          "only": "FIELD_ONLY",
          "ref": "INTERNAL_SERVER_ERROR",
          "required": "FIELD_REQUIRED",
          "unknown": "FIELD_UNKNOWN"
        },
        "alternatives": {
          "all": "INTERNAL_SERVER_ERROR",
          "any": "INTERNAL_SERVER_ERROR",
          "match": "INTERNAL_SERVER_ERROR",
          "one": "INTERNAL_SERVER_ERROR",
          "types": "INTERNAL_SERVER_ERROR"
        },
        "array": {
          "base": "FIELD_TYPE",
          "excludes": "INTERNAL_SERVER_ERROR",
          "hasKnown": "INTERNAL_SERVER_ERROR",
          "hasUnknown": "INTERNAL_SERVER_ERROR",
          "includes": "INTERNAL_SERVER_ERROR",
          "includesRequiredBoth": "INTERNAL_SERVER_ERROR",
          "includesRequiredKnowns": "INTERNAL_SERVER_ERROR",
          "includesRequiredUnknowns": "INTERNAL_SERVER_ERROR",
          "length": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE",
          "orderedLength": "INTERNAL_SERVER_ERROR",
          "sort": "INTERNAL_SERVER_ERROR",
          "sort.mismatching": "INTERNAL_SERVER_ERROR",
          "sort.unsupported": "INTERNAL_SERVER_ERROR",
          "sparse": "INTERNAL_SERVER_ERROR",
          "unique": "INTERNAL_SERVER_ERROR"
        },
        "binary": {
          "base": "FIELD_TYPE",
          "length": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE"
        },
        "boolean": {
          "base": "FIELD_TYPE"
        },
        "date": {
          "base": "FIELD_TYPE",
          "format": "INTERNAL_SERVER_ERROR",
          "greater": "INTERNAL_SERVER_ERROR",
          "less": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE",
          "format.iso": "INTERNAL_SERVER_ERROR",
          "format.javascript": "INTERNAL_SERVER_ERROR",
          "format.unix": "INTERNAL_SERVER_ERROR"
        },
        "function": {
          "arity": "INTERNAL_SERVER_ERROR",
          "class": "INTERNAL_SERVER_ERROR",
          "maxArity": "INTERNAL_SERVER_ERROR",
          "minArity": "INTERNAL_SERVER_ERROR"
        },
        "object": {
          "and": "INTERNAL_SERVER_ERROR",
          "assert": "INTERNAL_SERVER_ERROR",
          "base": "FIELD_TYPE",
          "instance": "INTERNAL_SERVER_ERROR",
          "length": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE",
          "missing": "INTERNAL_SERVER_ERROR",
          "nand": "INTERNAL_SERVER_ERROR",
          "oxor": "INTERNAL_SERVER_ERROR",
          "pattern": {
            "match": "INTERNAL_SERVER_ERROR"
          },
          "refType": "INTERNAL_SERVER_ERROR",
          "rename": {
            "multiple": "INTERNAL_SERVER_ERROR",
            "override": "INTERNAL_SERVER_ERROR"
          },
          "schema": "INTERNAL_SERVER_ERROR",
          "unknown": "FIELD_UNKNOWN",
          "with": "INTERNAL_SERVER_ERROR",
          "without": "INTERNAL_SERVER_ERROR",
          "xor": "INTERNAL_SERVER_ERROR"
        },
        "number": {
          "base": "FIELD_TYPE",
          "greater": "INTERNAL_SERVER_ERROR",
          "infinity": "INTERNAL_SERVER_ERROR",
          "integer": "INTERNAL_SERVER_ERROR",
          "less": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE",
          "multiple": "INTERNAL_SERVER_ERROR",
          "negative": "INTERNAL_SERVER_ERROR",
          "port": "INTERNAL_SERVER_ERROR",
          "positive": "INTERNAL_SERVER_ERROR",
          "precision": "INTERNAL_SERVER_ERROR",
          "unsafe": "INTERNAL_SERVER_ERROR"
        },
        "symbol": {
          "base": "FIELD_TYPE",
          "map": "INTERNAL_SERVER_ERROR"
        },
        "string": {
          "alphanum": "INTERNAL_SERVER_ERROR",
          "base": "FIELD_TYPE",
          "base64": "FIELD_TYPE",
          "creditCard": "INTERNAL_SERVER_ERROR",
          "dataUri": "INTERNAL_SERVER_ERROR",
          "domain": "INTERNAL_SERVER_ERROR",
          "email": "INTERNAL_SERVER_ERROR",
          "empty": "FIELD_REQUIRED",
          "guid": "INTERNAL_SERVER_ERROR",
          "hex": "INTERNAL_SERVER_ERROR",
          "hexAlign": "INTERNAL_SERVER_ERROR",
          "hostname": "INTERNAL_SERVER_ERROR",
          "ip": "INTERNAL_SERVER_ERROR",
          "ipVersion": "INTERNAL_SERVER_ERROR",
          "isoDate": "INTERNAL_SERVER_ERROR",
          "isoDuration": "INTERNAL_SERVER_ERROR",
          "length": "STRING_LENGTH",
          "lowercase": "INTERNAL_SERVER_ERROR",
          "max": "FIELD_TYPE_RANGE",
          "min": "FIELD_TYPE_RANGE",
          "normalize": "INTERNAL_SERVER_ERROR",
          "token": "INTERNAL_SERVER_ERROR",
          "pattern": {
            "base": "FIELD_TYPE",
            "name": "INTERNAL_SERVER_ERROR",
            "invert": {
              "base": "FIELD_TYPE",
              "name": "INTERNAL_SERVER_ERROR"
            }
          },
          "trim": "INTERNAL_SERVER_ERROR",
          "uri": "INTERNAL_SERVER_ERROR",
          "uriCustomScheme": "INTERNAL_SERVER_ERROR",
          "uriRelativeOnly": "INTERNAL_SERVER_ERROR",
          "uppercase": "INTERNAL_SERVER_ERROR"
        }
      }
    },
    "messages": {
      "invalidParameter": "Invalid Parameter",
      "resourceNotFound": "{{label}} can not be found.",
      "badRequest": "Bad Request",
      "internalServerError": "Internal Server Error has occured",
      "gatewayTimeout": "Bad Gateway Timeout",
      "unauthorized": "User is not authorized. You need to log in again.",
      "unauthenticated": "Not user authentication. You need to log in again.",
      "forbidden": "Action is not allowed.",
      "unprocessableEntity": "Unprocessable entity",
      "field": {
        "only": "Please select one of the items that are displayed.",
        "required": "This field is required. Please enter.",
        "differentType": "Parameter type of field is incorrect. Please contact us if the problem persists.",
        "range": "Parameter type range of field is incorrect. Please contact us if the problem persists."
      },
      "params": {
        "required": "Parameter is required. Please contact us if the problem persists."
      },
      "format": {
        "notCorrect": "Format of the request is not correct."
      },
      "contentInUsed": "Content is in used, cannot execute the operation",
      "numericString": "Validation failed (numeric string is expected)"
    }
  }
}
